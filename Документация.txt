Данная библиотека создана для удобного хранения данных как локально так и на сервере.
С помощью данной библиотеки можно отпрпвлять нужные метрики и прогресс по игре на сервер.
Версия Unity 2019.4.21f1

Начало работы (основной функционал):
1)Добавление компанента SaveController к своему контроллеру данных и установка токена
SaveController SC = gameObject.AddComponent<SaveController>();
В методе Start() класса SaveController требуется вписать токен своей игры.
2)Отправка метрики
SC.SendNewMetricData('название метрики');
3)Сохранение данных 
SG.SetGameData('строка(JSON) который требуется сохранить');
4)Загрузка данных 
SC.GetGameData();
5)Фаил JavaScript
Достает из браузера токен сессии, должен быть помещен в папку Plugins


Описание всех методов класса SaveController:
1)void UpdateGameData();
Загружает данные из локальных сохранений и если есть возможность с сервера в библиотеку.
2)string GetGameData();
Получение данных из библиотеки.
3)void SetGameData(string);
Отправка данных на локальное и серверное сохранение  в библиотеку.
4)void UpdateGameDataFromRequest(string);
Метод через который WebController Устанавливает значение новой GameData 
Не использовать.
5)void SetGameProgress(float);
Установка прогресса игры который будет отбражаться на сайте.
6)void SendNewMetricData(string); 
Отправка новой метрики созданной по строке на сервер.
7)void SendMetricData(MetricsData);
Отправка готовой метрики на сервер.
8)string UpdateGameDataFromRequest();
Метод возвращающий данные только по получению таковых с сервера. Вызывать асинхронно.
Подходит для запуска во время загрузки.

Публичные поля класса SaveController
RequestFlag 
true во время запроса 
false когда запрос не происходит

IsSessionOnline
false если сессия с сервером не установлена и идет только клиентское сохранение данных

Описание методов WebController
Все методы отвечают за связь с сервером и не требуют использования.
1)WebController(SaveController,string);
Конструктор объекта класса.
2)void RequestUpdateGameData();
Получение данных с сервера. Они записываются в SaveController котоырй указывался в конструкторе.
3)void SendMetricData(MetricsData);
Отправка метрики на сервер.
4)void SetGameProgress(float);
Отправка прогресса игры на сервер.
5)void SetGameData(GameData);
Отправка GameData на свервер.
6)string AddQueryString(string api);
Добавление к строке запроса параметров запроса. На данный момент не используется.
7)IEnumerator postRequest(string json, string api);
Метод POST запроса. Ответ если присутствует вписывается в SaveController.UpdateGameDataFromRequest();

Дополнительные классы
GameData
Класс данных о игре оторый преобразуется в JSON который в свою очередь отправляется на сервер.

MetricsData
Класс метрик который преобразуется в JSON который в свою очередь отправляется на сервер.

AcceptPublicKey 
Класс который проверет RSA ключ сервера для коректной работы https протокола.


